Functionality
    add filtering to tables that need it
        bar log
        cash log
    add pages 'dagboek' and 'kasboek'
    uploading of attachments
    add validator to check if a new stock item name is unique
    add notifications
    add a way to track membership fees
    add an api vwcr can hook into
    automatically show a view to check a user's payment of his membership fees when filing a transation with the category 'membership fee'
    (accept commas or periods on decimal fields)
    add active field for stock items instead of removing them
    hide pagination when there is only one page

Refactoring
    make database object model names singular
    check the way users are activated: active, actief_lid, membership role
    check if setattrs are caried over
    remove unused code from flask_security/ (~2000 of ~3000 LOC are in here)
    Minimize the number of times we read or write to the DB
    check validity of XHTML, CSS & JS
    fix whitespace in produced XHTML
    use jinja2 macros to minimize copied code in templates

Bugs
    permissions and user email are saved in user session. this is only written on login. Therefore users will need to log out and log back in tosee the change.
    somehow the textarea tag around the motivation field is sent along and written to the DB. these tags are then stipped in the view by using the striptag filter. This doesn't happen when using the TextAreaField outside flask_security

Usability
    improve graphical design
        use symbolic icons

Before deployment
    forms checklist:
        redirect after a POST (to prevent data from being submitted twice if users refresh the page)
        use all necessary validators
        use if form.validate_on_submit():
        templates don't define their own input elements
        use functions to process booleans
        use add_confirmation()

Questions
    How do we implement the purchase of multiple items simultaneously?
        At the moment we record the following attributes for each purchase: 
            item_id: which item is bought
            amount: how many of this item is bought
            total_price: the total price for this purchase
            datetime: the time ate which the purchase happened
            user_id: which user made the purchase (or cash)
            transaction_type: indicates if we are correcting or stocking up instead of purchasing
        Thus it is possible to purhase multiple drink at the same time, but only if it's the same drink.
        Wouldn't it be easier to have VWCR record the sale of multiple items as multiple purchases in the database?
            amount would always be 1 and could thus be dropped
            total_price would become price
            other fields would stay the same